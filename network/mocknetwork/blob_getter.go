// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocknetwork

import (
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlobGetter is an autogenerated mock type for the BlobGetter type
type BlobGetter struct {
	mock.Mock
}

// GetBlob provides a mock function with given fields: ctx, c
func (_m *BlobGetter) GetBlob(ctx context.Context, c cid.Cid) (blocks.Block, error) {
	ret := _m.Called(ctx, c)

	var r0 blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) blocks.Block); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocks.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlobs provides a mock function with given fields: ctx, ks
func (_m *BlobGetter) GetBlobs(ctx context.Context, ks ...cid.Cid) <-chan blocks.Block {
	_va := make([]interface{}, len(ks))
	for _i := range ks {
		_va[_i] = ks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, ...cid.Cid) <-chan blocks.Block); ok {
		r0 = rf(ctx, ks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan blocks.Block)
		}
	}

	return r0
}
